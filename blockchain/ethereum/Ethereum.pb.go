// +build deluxe

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Ethereum.proto

package ethereum

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Input data necessary to create a signed transaction.
type SigningInput struct {
	// Chain identifier (256-bit number)
	ChainId []byte `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Nonce (256-bit number)
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Gas price (256-bit number)
	GasPrice []byte `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Gas limit (256-bit number)
	GasLimit []byte `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// Recipient's address.
	ToAddress string `protobuf:"bytes,5,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	// Amount to send in wei (256-bit number)
	Amount []byte `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional payload
	Payload []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	// Private key.
	PrivateKey           []byte   `protobuf:"bytes,8,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigningInput) Reset()         { *m = SigningInput{} }
func (m *SigningInput) String() string { return proto.CompactTextString(m) }
func (*SigningInput) ProtoMessage()    {}
func (*SigningInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_8324700867e574e4, []int{0}
}

func (m *SigningInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigningInput.Unmarshal(m, b)
}
func (m *SigningInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigningInput.Marshal(b, m, deterministic)
}
func (m *SigningInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningInput.Merge(m, src)
}
func (m *SigningInput) XXX_Size() int {
	return xxx_messageInfo_SigningInput.Size(m)
}
func (m *SigningInput) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningInput.DiscardUnknown(m)
}

var xxx_messageInfo_SigningInput proto.InternalMessageInfo

func (m *SigningInput) GetChainId() []byte {
	if m != nil {
		return m.ChainId
	}
	return nil
}

func (m *SigningInput) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *SigningInput) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *SigningInput) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *SigningInput) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *SigningInput) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *SigningInput) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *SigningInput) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// Transaction signing output.
type SigningOutput struct {
	// Signed and encoded transaction bytes.
	Encoded              []byte   `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	V                    []byte   `protobuf:"bytes,2,opt,name=v,proto3" json:"v,omitempty"`
	R                    []byte   `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S                    []byte   `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SigningOutput) Reset()         { *m = SigningOutput{} }
func (m *SigningOutput) String() string { return proto.CompactTextString(m) }
func (*SigningOutput) ProtoMessage()    {}
func (*SigningOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_8324700867e574e4, []int{1}
}

func (m *SigningOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SigningOutput.Unmarshal(m, b)
}
func (m *SigningOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SigningOutput.Marshal(b, m, deterministic)
}
func (m *SigningOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningOutput.Merge(m, src)
}
func (m *SigningOutput) XXX_Size() int {
	return xxx_messageInfo_SigningOutput.Size(m)
}
func (m *SigningOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningOutput.DiscardUnknown(m)
}

var xxx_messageInfo_SigningOutput proto.InternalMessageInfo

func (m *SigningOutput) GetEncoded() []byte {
	if m != nil {
		return m.Encoded
	}
	return nil
}

func (m *SigningOutput) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *SigningOutput) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *SigningOutput) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func init() {
	proto.RegisterType((*SigningInput)(nil), "TW.Ethereum.Proto.SigningInput")
	proto.RegisterType((*SigningOutput)(nil), "TW.Ethereum.Proto.SigningOutput")
}

func init() { proto.RegisterFile("Ethereum.proto", fileDescriptor_8324700867e574e4) }

var fileDescriptor_8324700867e574e4 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x18, 0x86, 0x89, 0xba, 0xb5, 0xfb, 0x9c, 0x82, 0x41, 0x25, 0x22, 0xe2, 0xdc, 0x69, 0xa7, 0x5e,
	0xfc, 0x05, 0x0a, 0x1e, 0x86, 0x82, 0x63, 0x13, 0x04, 0x2f, 0x25, 0x36, 0x1f, 0x5d, 0xb4, 0x4d,
	0x4a, 0x92, 0x56, 0xfa, 0x9b, 0xfd, 0x13, 0x92, 0x34, 0xf6, 0xf8, 0x3c, 0x2f, 0x81, 0x3c, 0x1f,
	0x9c, 0x3e, 0xb9, 0x3d, 0x1a, 0x6c, 0xeb, 0xac, 0x31, 0xda, 0x69, 0x7a, 0xf6, 0xf6, 0x9e, 0x8d,
	0x6a, 0xe3, 0xd5, 0xf2, 0x97, 0xc0, 0x7c, 0x27, 0x4b, 0x25, 0x55, 0xb9, 0x56, 0x4d, 0xeb, 0xe8,
	0x15, 0xa4, 0xc5, 0x9e, 0x4b, 0x95, 0x4b, 0xc1, 0xc8, 0x82, 0xac, 0xe6, 0xdb, 0x24, 0xf0, 0x5a,
	0xd0, 0x73, 0x98, 0x28, 0xad, 0x0a, 0x64, 0x07, 0xc1, 0x0f, 0x40, 0xaf, 0x61, 0x56, 0x72, 0x9b,
	0x37, 0x46, 0x16, 0xc8, 0x0e, 0xc3, 0x92, 0x96, 0xdc, 0x6e, 0x3c, 0xff, 0x8f, 0x95, 0xac, 0xa5,
	0x63, 0x47, 0xe3, 0xf8, 0xe2, 0x99, 0xde, 0x00, 0x38, 0x9d, 0x73, 0x21, 0x0c, 0x5a, 0xcb, 0x26,
	0x0b, 0xb2, 0x9a, 0x6d, 0x67, 0x4e, 0x3f, 0x0c, 0x82, 0x5e, 0xc2, 0x94, 0xd7, 0xba, 0x55, 0x8e,
	0x4d, 0xc3, 0xc3, 0x48, 0x94, 0x41, 0xd2, 0xf0, 0xbe, 0xd2, 0x5c, 0xb0, 0x64, 0xf8, 0x60, 0x44,
	0x7a, 0x0b, 0xc7, 0x8d, 0x91, 0x1d, 0x77, 0x98, 0x7f, 0x63, 0xcf, 0xd2, 0xb0, 0x42, 0x54, 0xcf,
	0xd8, 0x2f, 0x77, 0x70, 0x12, 0x63, 0x5f, 0x5b, 0xe7, 0x6b, 0x19, 0x24, 0xa8, 0x0a, 0x2d, 0x70,
	0x8c, 0x8d, 0x48, 0xe7, 0x40, 0xba, 0x18, 0x4a, 0x3a, 0x4f, 0x26, 0xc6, 0x11, 0xe3, 0xc9, 0xc6,
	0x1a, 0x62, 0x1f, 0xef, 0xe0, 0xe2, 0x87, 0x57, 0x15, 0xba, 0xac, 0xd0, 0x06, 0xb3, 0x2f, 0x25,
	0x87, 0x73, 0x7f, 0xa4, 0x18, 0x6f, 0xfd, 0x39, 0x0d, 0xe2, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0x89, 0xff, 0x9c, 0xc5, 0x91, 0x01, 0x00, 0x00,
}
