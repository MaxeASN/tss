// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: ClientMessage.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PeerHelloRequest requests a PeerHello for a client_id.
type PeerHelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *PeerHelloRequest) Reset() {
	*x = PeerHelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerHelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerHelloRequest) ProtoMessage() {}

func (x *PeerHelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerHelloRequest.ProtoReflect.Descriptor instead.
func (*PeerHelloRequest) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{0}
}

func (x *PeerHelloRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// PeerHello represents a peer's introductory message containing their identity pubkey.
type PeerHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Pubkey   string `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (x *PeerHello) Reset() {
	*x = PeerHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerHello) ProtoMessage() {}

func (x *PeerHello) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerHello.ProtoReflect.Descriptor instead.
func (*PeerHello) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{1}
}

func (x *PeerHello) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PeerHello) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PeerHello) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

// VaultJoinRequest contains a one-time invite token with the inviter's RSA signature and joiner's RSA signature.
type VaultJoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaultId                     string `protobuf:"bytes,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	InviterId                   string `protobuf:"bytes,2,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	InviterInviteToken          string `protobuf:"bytes,3,opt,name=inviter_invite_token,json=inviterInviteToken,proto3" json:"inviter_invite_token,omitempty"`
	InviterInviteTokenSignature string `protobuf:"bytes,4,opt,name=inviter_invite_token_signature,json=inviterInviteTokenSignature,proto3" json:"inviter_invite_token_signature,omitempty"`
	JoinerSignature             string `protobuf:"bytes,5,opt,name=joiner_signature,json=joinerSignature,proto3" json:"joiner_signature,omitempty"`
}

func (x *VaultJoinRequest) Reset() {
	*x = VaultJoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultJoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultJoinRequest) ProtoMessage() {}

func (x *VaultJoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultJoinRequest.ProtoReflect.Descriptor instead.
func (*VaultJoinRequest) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{2}
}

func (x *VaultJoinRequest) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *VaultJoinRequest) GetInviterId() string {
	if x != nil {
		return x.InviterId
	}
	return ""
}

func (x *VaultJoinRequest) GetInviterInviteToken() string {
	if x != nil {
		return x.InviterInviteToken
	}
	return ""
}

func (x *VaultJoinRequest) GetInviterInviteTokenSignature() string {
	if x != nil {
		return x.InviterInviteTokenSignature
	}
	return ""
}

func (x *VaultJoinRequest) GetJoinerSignature() string {
	if x != nil {
		return x.JoinerSignature
	}
	return ""
}

// VaultJoinApproval contains the following fields:
// a. The Joiner's RSA public key
// b. The Joiner's RSA signature
// c. The new VaultDefinition containing the updated membership status
// d. The confirmer's RSA signature of VaultDefinition
// This message is to be retained in the shared vault topic.
type VaultJoinApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaultId                            string `protobuf:"bytes,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	VaultDefinitionJson                string `protobuf:"bytes,2,opt,name=vault_definition_json,json=vaultDefinitionJson,proto3" json:"vault_definition_json,omitempty"`
	SenderVaultDefinitionJsonSignature string `protobuf:"bytes,3,opt,name=sender_vault_definition_json_signature,json=senderVaultDefinitionJsonSignature,proto3" json:"sender_vault_definition_json_signature,omitempty"`
}

func (x *VaultJoinApproval) Reset() {
	*x = VaultJoinApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultJoinApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultJoinApproval) ProtoMessage() {}

func (x *VaultJoinApproval) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultJoinApproval.ProtoReflect.Descriptor instead.
func (*VaultJoinApproval) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{3}
}

func (x *VaultJoinApproval) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *VaultJoinApproval) GetVaultDefinitionJson() string {
	if x != nil {
		return x.VaultDefinitionJson
	}
	return ""
}

func (x *VaultJoinApproval) GetSenderVaultDefinitionJsonSignature() string {
	if x != nil {
		return x.SenderVaultDefinitionJsonSignature
	}
	return ""
}

// VaultPendingPeers contains the new pending peers to regroup into a vault, sent regularly by the existing members.
type VaultPendingPeers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Approval                             *VaultJoinApproval `protobuf:"bytes,1,opt,name=approval,proto3" json:"approval,omitempty"`
	VaultMembersCount                    int32              `protobuf:"varint,2,opt,name=vault_members_count,json=vaultMembersCount,proto3" json:"vault_members_count,omitempty"`
	VaultPendingPeersJson                string             `protobuf:"bytes,3,opt,name=vault_pending_peers_json,json=vaultPendingPeersJson,proto3" json:"vault_pending_peers_json,omitempty"`
	VaultPendingPeersConfirms            []string           `protobuf:"bytes,4,rep,name=vault_pending_peers_confirms,json=vaultPendingPeersConfirms,proto3" json:"vault_pending_peers_confirms,omitempty"`
	SenderVaultPendingPeersJsonSignature string             `protobuf:"bytes,5,opt,name=sender_vault_pending_peers_json_signature,json=senderVaultPendingPeersJsonSignature,proto3" json:"sender_vault_pending_peers_json_signature,omitempty"`
	PendingPeersPubkeys                  map[string]string  `protobuf:"bytes,6,rep,name=pending_peers_pubkeys,json=pendingPeersPubkeys,proto3" json:"pending_peers_pubkeys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NewPeerIds                           []string           `protobuf:"bytes,7,rep,name=new_peer_ids,json=newPeerIds,proto3" json:"new_peer_ids,omitempty"`
	RemovePeerIds                        []string           `protobuf:"bytes,8,rep,name=remove_peer_ids,json=removePeerIds,proto3" json:"remove_peer_ids,omitempty"`
	AtTimestamp                          string             `protobuf:"bytes,9,opt,name=at_timestamp,json=atTimestamp,proto3" json:"at_timestamp,omitempty"`
	ExpiryTimestamp                      string             `protobuf:"bytes,10,opt,name=expiry_timestamp,json=expiryTimestamp,proto3" json:"expiry_timestamp,omitempty"`
	RequestId                            string             `protobuf:"bytes,11,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *VaultPendingPeers) Reset() {
	*x = VaultPendingPeers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultPendingPeers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultPendingPeers) ProtoMessage() {}

func (x *VaultPendingPeers) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultPendingPeers.ProtoReflect.Descriptor instead.
func (*VaultPendingPeers) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{4}
}

func (x *VaultPendingPeers) GetApproval() *VaultJoinApproval {
	if x != nil {
		return x.Approval
	}
	return nil
}

func (x *VaultPendingPeers) GetVaultMembersCount() int32 {
	if x != nil {
		return x.VaultMembersCount
	}
	return 0
}

func (x *VaultPendingPeers) GetVaultPendingPeersJson() string {
	if x != nil {
		return x.VaultPendingPeersJson
	}
	return ""
}

func (x *VaultPendingPeers) GetVaultPendingPeersConfirms() []string {
	if x != nil {
		return x.VaultPendingPeersConfirms
	}
	return nil
}

func (x *VaultPendingPeers) GetSenderVaultPendingPeersJsonSignature() string {
	if x != nil {
		return x.SenderVaultPendingPeersJsonSignature
	}
	return ""
}

func (x *VaultPendingPeers) GetPendingPeersPubkeys() map[string]string {
	if x != nil {
		return x.PendingPeersPubkeys
	}
	return nil
}

func (x *VaultPendingPeers) GetNewPeerIds() []string {
	if x != nil {
		return x.NewPeerIds
	}
	return nil
}

func (x *VaultPendingPeers) GetRemovePeerIds() []string {
	if x != nil {
		return x.RemovePeerIds
	}
	return nil
}

func (x *VaultPendingPeers) GetAtTimestamp() string {
	if x != nil {
		return x.AtTimestamp
	}
	return ""
}

func (x *VaultPendingPeers) GetExpiryTimestamp() string {
	if x != nil {
		return x.ExpiryTimestamp
	}
	return ""
}

func (x *VaultPendingPeers) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// VaultRemovalNotification informs a peer that:
// 1. they are going to be removed from a vault when someone submitted a reshare request (is_complete = false)
// 2. they have been removed from a vault after a successful regroup. (is_complete = true)
type VaultRemovalNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId           string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"` // id of reshare request
	VaultId             string `protobuf:"bytes,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	VaultRegroupCounter int32  `protobuf:"varint,3,opt,name=vault_regroup_counter,json=vaultRegroupCounter,proto3" json:"vault_regroup_counter,omitempty"`
	Timestamp           string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	IsComplete          bool   `protobuf:"varint,5,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
}

func (x *VaultRemovalNotification) Reset() {
	*x = VaultRemovalNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultRemovalNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultRemovalNotification) ProtoMessage() {}

func (x *VaultRemovalNotification) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultRemovalNotification.ProtoReflect.Descriptor instead.
func (*VaultRemovalNotification) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{5}
}

func (x *VaultRemovalNotification) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *VaultRemovalNotification) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *VaultRemovalNotification) GetVaultRegroupCounter() int32 {
	if x != nil {
		return x.VaultRegroupCounter
	}
	return 0
}

func (x *VaultRemovalNotification) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *VaultRemovalNotification) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

type SignParticipantConfirmed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaultId  string `protobuf:"bytes,1,opt,name=vaultId,proto3" json:"vaultId,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=clientId,proto3" json:"clientId,omitempty"`
}

func (x *SignParticipantConfirmed) Reset() {
	*x = SignParticipantConfirmed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignParticipantConfirmed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignParticipantConfirmed) ProtoMessage() {}

func (x *SignParticipantConfirmed) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignParticipantConfirmed.ProtoReflect.Descriptor instead.
func (*SignParticipantConfirmed) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{6}
}

func (x *SignParticipantConfirmed) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *SignParticipantConfirmed) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type AddressMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address             string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pubkey              string `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"` // hex encoded btcec.serializecompressed
	Network             string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	NetworkCondition    string `protobuf:"bytes,4,opt,name=networkCondition,proto3" json:"networkCondition,omitempty"` // open, closed
	Asset               string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	VaultId             string `protobuf:"bytes,6,opt,name=vaultId,proto3" json:"vaultId,omitempty"`
	VaultName           string `protobuf:"bytes,7,opt,name=vaultName,proto3" json:"vaultName,omitempty"`
	Symbol              string `protobuf:"bytes,8,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals            int32  `protobuf:"varint,9,opt,name=decimals,proto3" json:"decimals,omitempty"`
	PubkeySignature     string `protobuf:"bytes,10,opt,name=pubkeySignature,proto3" json:"pubkeySignature,omitempty"`         // TSS-745
	NonceAccountAddress string `protobuf:"bytes,11,opt,name=nonceAccountAddress,proto3" json:"nonceAccountAddress,omitempty"` //TSS-989
	NonceAccountStatus  string `protobuf:"bytes,12,opt,name=nonceAccountStatus,proto3" json:"nonceAccountStatus,omitempty"`   //TSS-989
}

func (x *AddressMessage) Reset() {
	*x = AddressMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressMessage) ProtoMessage() {}

func (x *AddressMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressMessage.ProtoReflect.Descriptor instead.
func (*AddressMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{7}
}

func (x *AddressMessage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressMessage) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

func (x *AddressMessage) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *AddressMessage) GetNetworkCondition() string {
	if x != nil {
		return x.NetworkCondition
	}
	return ""
}

func (x *AddressMessage) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AddressMessage) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *AddressMessage) GetVaultName() string {
	if x != nil {
		return x.VaultName
	}
	return ""
}

func (x *AddressMessage) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AddressMessage) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *AddressMessage) GetPubkeySignature() string {
	if x != nil {
		return x.PubkeySignature
	}
	return ""
}

func (x *AddressMessage) GetNonceAccountAddress() string {
	if x != nil {
		return x.NonceAccountAddress
	}
	return ""
}

func (x *AddressMessage) GetNonceAccountStatus() string {
	if x != nil {
		return x.NonceAccountStatus
	}
	return ""
}

type VaultMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaultId          string `protobuf:"bytes,1,opt,name=vaultId,proto3" json:"vaultId,omitempty"`
	VaultName        string `protobuf:"bytes,2,opt,name=vaultName,proto3" json:"vaultName,omitempty"`
	DeviceId         string `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Operator         string `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	WhitelistCurveId string `protobuf:"bytes,5,opt,name=whitelistCurveId,proto3" json:"whitelistCurveId,omitempty"`
	WhitelistPubkey  string `protobuf:"bytes,6,opt,name=whitelistPubkey,proto3" json:"whitelistPubkey,omitempty"`
}

func (x *VaultMessage) Reset() {
	*x = VaultMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultMessage) ProtoMessage() {}

func (x *VaultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultMessage.ProtoReflect.Descriptor instead.
func (*VaultMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{8}
}

func (x *VaultMessage) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *VaultMessage) GetVaultName() string {
	if x != nil {
		return x.VaultName
	}
	return ""
}

func (x *VaultMessage) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *VaultMessage) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *VaultMessage) GetWhitelistCurveId() string {
	if x != nil {
		return x.WhitelistCurveId
	}
	return ""
}

func (x *VaultMessage) GetWhitelistPubkey() string {
	if x != nil {
		return x.WhitelistPubkey
	}
	return ""
}

type WhitelistMetaInfoMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaultId string `protobuf:"bytes,1,opt,name=vaultId,proto3" json:"vaultId,omitempty"`
	CurveId string `protobuf:"bytes,2,opt,name=curveId,proto3" json:"curveId,omitempty"`
	Pubkey  string `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"` // hex encoded btcec.serializecompressed
}

func (x *WhitelistMetaInfoMessage) Reset() {
	*x = WhitelistMetaInfoMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistMetaInfoMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistMetaInfoMessage) ProtoMessage() {}

func (x *WhitelistMetaInfoMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistMetaInfoMessage.ProtoReflect.Descriptor instead.
func (*WhitelistMetaInfoMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{9}
}

func (x *WhitelistMetaInfoMessage) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *WhitelistMetaInfoMessage) GetCurveId() string {
	if x != nil {
		return x.CurveId
	}
	return ""
}

func (x *WhitelistMetaInfoMessage) GetPubkey() string {
	if x != nil {
		return x.Pubkey
	}
	return ""
}

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network      string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	From         string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To           string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount       string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Asset        string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	Traceid      string `protobuf:"bytes,6,opt,name=traceid,proto3" json:"traceid,omitempty"`
	Sequence     int32  `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Memo         string `protobuf:"bytes,8,opt,name=memo,proto3" json:"memo,omitempty"`                 // UPDATE at TSS-400
	RequireAll   bool   `protobuf:"varint,9,opt,name=requireAll,proto3" json:"requireAll,omitempty"`    // UPDATE at TSS-329
	NumOfOutput  int32  `protobuf:"varint,10,opt,name=numOfOutput,proto3" json:"numOfOutput,omitempty"` // UPDATE at TSS-336
	Decimals     int32  `protobuf:"varint,11,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Symbol       string `protobuf:"bytes,12,opt,name=symbol,proto3" json:"symbol,omitempty"`              // UPDATE at TSS-529/TSS-544
	UseMaxAmount bool   `protobuf:"varint,13,opt,name=useMaxAmount,proto3" json:"useMaxAmount,omitempty"` // UPDATE at TSS-845
	Nonce        int64  `protobuf:"varint,14,opt,name=nonce,proto3" json:"nonce,omitempty"`               // UPDATE at TSS-1065
	GasPrice     string `protobuf:"bytes,15,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`          // UPDATE at TSS-1116
	GasLimit     int64  `protobuf:"varint,16,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`         // UPDATE at SAF-150
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{10}
}

func (x *Transfer) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Transfer) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transfer) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Transfer) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Transfer) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

func (x *Transfer) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Transfer) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Transfer) GetRequireAll() bool {
	if x != nil {
		return x.RequireAll
	}
	return false
}

func (x *Transfer) GetNumOfOutput() int32 {
	if x != nil {
		return x.NumOfOutput
	}
	return 0
}

func (x *Transfer) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Transfer) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Transfer) GetUseMaxAmount() bool {
	if x != nil {
		return x.UseMaxAmount
	}
	return false
}

func (x *Transfer) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transfer) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *Transfer) GetGasLimit() int64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfer  *Transfer `protobuf:"bytes,1,opt,name=transfer,proto3" json:"transfer,omitempty"`
	Signature string    `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{11}
}

func (x *Request) GetTransfer() *Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *Request) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type SignEthLikeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId  int64  `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Nonce    int64  `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To       string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	From     string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Value    string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	GasPrice string `protobuf:"bytes,6,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	GasLimit string `protobuf:"bytes,7,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	Data     string `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Traceid  string `protobuf:"bytes,9,opt,name=traceid,proto3" json:"traceid,omitempty"`
}

func (x *SignEthLikeRequest) Reset() {
	*x = SignEthLikeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignEthLikeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignEthLikeRequest) ProtoMessage() {}

func (x *SignEthLikeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignEthLikeRequest.ProtoReflect.Descriptor instead.
func (*SignEthLikeRequest) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{12}
}

func (x *SignEthLikeRequest) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *SignEthLikeRequest) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *SignEthLikeRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *SignEthLikeRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SignEthLikeRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SignEthLikeRequest) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *SignEthLikeRequest) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *SignEthLikeRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *SignEthLikeRequest) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

type SignEthLikeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request            *SignEthLikeRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"` // original request from frontend
	Message            []string            `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"` // hash of pre sign image server built
	Fee                string              `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	SignInput          string              `protobuf:"bytes,4,opt,name=sign_input,json=signInput,proto3" json:"sign_input,omitempty"`                   // rpc fields of presign image stuff i.e. gas estimation
	Timestamp          int64               `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                   // timestamp of this signmessage is generated
	ServerSignature    string              `protobuf:"bytes,6,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"` // ecdsa signature of all other fields, encoded by hex
	KeyDerivationDelta string              `protobuf:"bytes,7,opt,name=keyDerivationDelta,proto3" json:"keyDerivationDelta,omitempty"`                  // TSS-17 a big integer represents delta for HD wallet
	ChildPkX           string              `protobuf:"bytes,8,opt,name=childPkX,proto3" json:"childPkX,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived X point of public key
	ChildPkY           string              `protobuf:"bytes,9,opt,name=childPkY,proto3" json:"childPkY,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived Y point of public key
	ChildVaultId       string              `protobuf:"bytes,10,opt,name=childVaultId,proto3" json:"childVaultId,omitempty"`                             // TSS-17
}

func (x *SignEthLikeMessage) Reset() {
	*x = SignEthLikeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignEthLikeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignEthLikeMessage) ProtoMessage() {}

func (x *SignEthLikeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignEthLikeMessage.ProtoReflect.Descriptor instead.
func (*SignEthLikeMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{13}
}

func (x *SignEthLikeMessage) GetRequest() *SignEthLikeRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SignEthLikeMessage) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignEthLikeMessage) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *SignEthLikeMessage) GetSignInput() string {
	if x != nil {
		return x.SignInput
	}
	return ""
}

func (x *SignEthLikeMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SignEthLikeMessage) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

func (x *SignEthLikeMessage) GetKeyDerivationDelta() string {
	if x != nil {
		return x.KeyDerivationDelta
	}
	return ""
}

func (x *SignEthLikeMessage) GetChildPkX() string {
	if x != nil {
		return x.ChildPkX
	}
	return ""
}

func (x *SignEthLikeMessage) GetChildPkY() string {
	if x != nil {
		return x.ChildPkY
	}
	return ""
}

func (x *SignEthLikeMessage) GetChildVaultId() string {
	if x != nil {
		return x.ChildVaultId
	}
	return ""
}

type WhitelistItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network   string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Asset     string   `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Addresses []string `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *WhitelistItem) Reset() {
	*x = WhitelistItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistItem) ProtoMessage() {}

func (x *WhitelistItem) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistItem.ProtoReflect.Descriptor instead.
func (*WhitelistItem) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{14}
}

func (x *WhitelistItem) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *WhitelistItem) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *WhitelistItem) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type WhitelistPerVault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whitelist []*WhitelistItem `protobuf:"bytes,1,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	Version   int32            `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Signature string           `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	VaultId   string           `protobuf:"bytes,4,opt,name=vaultId,proto3" json:"vaultId,omitempty"` // TSS-961
	Traceid   string           `protobuf:"bytes,5,opt,name=traceid,proto3" json:"traceid,omitempty"` // TSS-1065
}

func (x *WhitelistPerVault) Reset() {
	*x = WhitelistPerVault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhitelistPerVault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhitelistPerVault) ProtoMessage() {}

func (x *WhitelistPerVault) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhitelistPerVault.ProtoReflect.Descriptor instead.
func (*WhitelistPerVault) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{15}
}

func (x *WhitelistPerVault) GetWhitelist() []*WhitelistItem {
	if x != nil {
		return x.Whitelist
	}
	return nil
}

func (x *WhitelistPerVault) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WhitelistPerVault) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *WhitelistPerVault) GetVaultId() string {
	if x != nil {
		return x.VaultId
	}
	return ""
}

func (x *WhitelistPerVault) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

type SignMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request              *Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"` // original request from pnk-admin
	Message              []string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"` // hash of pre sign image server built
	Fee                  string   `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	SignInput            string   `protobuf:"bytes,4,opt,name=sign_input,json=signInput,proto3" json:"sign_input,omitempty"`                   // rpc fields of presign image stuff i.e. gas estimation
	PnkSignature         string   `protobuf:"bytes,5,opt,name=pnk_signature,json=pnkSignature,proto3" json:"pnk_signature,omitempty"`          // ecdsa signature of original request, same with signature in Request but encoded by hex
	Timestamp            int64    `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                   // timestamp of this signmessage is generated
	ServerSignature      string   `protobuf:"bytes,7,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"` // ecdsa signature of all other fields, encoded by hex
	KeyDerivationDelta   string   `protobuf:"bytes,8,opt,name=keyDerivationDelta,proto3" json:"keyDerivationDelta,omitempty"`                  // TSS-17 a big integer represents delta for HD wallet
	ChildPkX             string   `protobuf:"bytes,9,opt,name=childPkX,proto3" json:"childPkX,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived X point of public key
	ChildPkY             string   `protobuf:"bytes,10,opt,name=childPkY,proto3" json:"childPkY,omitempty"`                                     // TSS-17 a 32 bytes big integer represents derived Y point of public key
	ChildVaultId         string   `protobuf:"bytes,11,opt,name=childVaultId,proto3" json:"childVaultId,omitempty"`                             // TSS-17
	IgnoreWhitelistCheck bool     `protobuf:"varint,12,opt,name=ignoreWhitelistCheck,proto3" json:"ignoreWhitelistCheck,omitempty"`            //TSS-989
}

func (x *SignMessage) Reset() {
	*x = SignMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessage) ProtoMessage() {}

func (x *SignMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessage.ProtoReflect.Descriptor instead.
func (*SignMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{16}
}

func (x *SignMessage) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *SignMessage) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignMessage) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *SignMessage) GetSignInput() string {
	if x != nil {
		return x.SignInput
	}
	return ""
}

func (x *SignMessage) GetPnkSignature() string {
	if x != nil {
		return x.PnkSignature
	}
	return ""
}

func (x *SignMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SignMessage) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

func (x *SignMessage) GetKeyDerivationDelta() string {
	if x != nil {
		return x.KeyDerivationDelta
	}
	return ""
}

func (x *SignMessage) GetChildPkX() string {
	if x != nil {
		return x.ChildPkX
	}
	return ""
}

func (x *SignMessage) GetChildPkY() string {
	if x != nil {
		return x.ChildPkY
	}
	return ""
}

func (x *SignMessage) GetChildVaultId() string {
	if x != nil {
		return x.ChildVaultId
	}
	return ""
}

func (x *SignMessage) GetIgnoreWhitelistCheck() bool {
	if x != nil {
		return x.IgnoreWhitelistCheck
	}
	return false
}

type SignMessageForWhitelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Whitelist          string `protobuf:"bytes,1,opt,name=whitelist,proto3" json:"whitelist,omitempty"`                                    // json marshaled WhitelistPerVault without signature field
	OldWhitelist       string `protobuf:"bytes,2,opt,name=oldWhitelist,proto3" json:"oldWhitelist,omitempty"`                              // json marshaled WhitelistPerVault for the last version
	Message            string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                                        // hash of whitelist field
	Timestamp          int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                   // epoch seconds
	ServerSignature    string `protobuf:"bytes,5,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"` // ecdsa signature of all above fields, encoded by base64
	Traceid            string `protobuf:"bytes,6,opt,name=traceid,proto3" json:"traceid,omitempty"`
	Curveid            string `protobuf:"bytes,7,opt,name=curveid,proto3" json:"curveid,omitempty"`
	KeyDerivationDelta string `protobuf:"bytes,8,opt,name=keyDerivationDelta,proto3" json:"keyDerivationDelta,omitempty"` // TSS-17 a big integer represents delta for HD wallet
	ChildPkX           string `protobuf:"bytes,9,opt,name=childPkX,proto3" json:"childPkX,omitempty"`                     // TSS-17 a 32 bytes big integer represents derived X point of public key
	ChildPkY           string `protobuf:"bytes,10,opt,name=childPkY,proto3" json:"childPkY,omitempty"`                    // TSS-17 a 32 bytes big integer represents derived Y point of public key
	ChildVaultId       string `protobuf:"bytes,11,opt,name=childVaultId,proto3" json:"childVaultId,omitempty"`            // TSS-17
}

func (x *SignMessageForWhitelist) Reset() {
	*x = SignMessageForWhitelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMessageForWhitelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMessageForWhitelist) ProtoMessage() {}

func (x *SignMessageForWhitelist) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMessageForWhitelist.ProtoReflect.Descriptor instead.
func (*SignMessageForWhitelist) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{17}
}

func (x *SignMessageForWhitelist) GetWhitelist() string {
	if x != nil {
		return x.Whitelist
	}
	return ""
}

func (x *SignMessageForWhitelist) GetOldWhitelist() string {
	if x != nil {
		return x.OldWhitelist
	}
	return ""
}

func (x *SignMessageForWhitelist) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SignMessageForWhitelist) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SignMessageForWhitelist) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

func (x *SignMessageForWhitelist) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

func (x *SignMessageForWhitelist) GetCurveid() string {
	if x != nil {
		return x.Curveid
	}
	return ""
}

func (x *SignMessageForWhitelist) GetKeyDerivationDelta() string {
	if x != nil {
		return x.KeyDerivationDelta
	}
	return ""
}

func (x *SignMessageForWhitelist) GetChildPkX() string {
	if x != nil {
		return x.ChildPkX
	}
	return ""
}

func (x *SignMessageForWhitelist) GetChildPkY() string {
	if x != nil {
		return x.ChildPkY
	}
	return ""
}

func (x *SignMessageForWhitelist) GetChildVaultId() string {
	if x != nil {
		return x.ChildVaultId
	}
	return ""
}

type SignatureMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traceid    string                            `protobuf:"bytes,1,opt,name=traceid,proto3" json:"traceid,omitempty"`
	Signatures []*SignatureMessage_SignatureData `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SignatureMessage) Reset() {
	*x = SignatureMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureMessage) ProtoMessage() {}

func (x *SignatureMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureMessage.ProtoReflect.Descriptor instead.
func (*SignatureMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{18}
}

func (x *SignatureMessage) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

func (x *SignatureMessage) GetSignatures() []*SignatureMessage_SignatureData {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type SignOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *SignOpen) Reset() {
	*x = SignOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignOpen) ProtoMessage() {}

func (x *SignOpen) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignOpen.ProtoReflect.Descriptor instead.
func (*SignOpen) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{19}
}

func (x *SignOpen) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// I want participant in signing
type SignConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId                          string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ConfirmerIdentityPubkey            string   `protobuf:"bytes,2,opt,name=confirmer_identity_pubkey,json=confirmerIdentityPubkey,proto3" json:"confirmer_identity_pubkey,omitempty"`
	ConfirmerSignature                 string   `protobuf:"bytes,3,opt,name=confirmer_signature,json=confirmerSignature,proto3" json:"confirmer_signature,omitempty"`
	VaultDefinitionJson                string   `protobuf:"bytes,4,opt,name=vault_definition_json,json=vaultDefinitionJson,proto3" json:"vault_definition_json,omitempty"`
	SenderVaultDefinitionJsonSignature string   `protobuf:"bytes,5,opt,name=sender_vault_definition_json_signature,json=senderVaultDefinitionJsonSignature,proto3" json:"sender_vault_definition_json_signature,omitempty"`
	Signers                            []string `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *SignConfirmation) Reset() {
	*x = SignConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignConfirmation) ProtoMessage() {}

func (x *SignConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignConfirmation.ProtoReflect.Descriptor instead.
func (*SignConfirmation) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{20}
}

func (x *SignConfirmation) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignConfirmation) GetConfirmerIdentityPubkey() string {
	if x != nil {
		return x.ConfirmerIdentityPubkey
	}
	return ""
}

func (x *SignConfirmation) GetConfirmerSignature() string {
	if x != nil {
		return x.ConfirmerSignature
	}
	return ""
}

func (x *SignConfirmation) GetVaultDefinitionJson() string {
	if x != nil {
		return x.VaultDefinitionJson
	}
	return ""
}

func (x *SignConfirmation) GetSenderVaultDefinitionJsonSignature() string {
	if x != nil {
		return x.SenderVaultDefinitionJsonSignature
	}
	return ""
}

func (x *SignConfirmation) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type SignRejection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *SignRejection) Reset() {
	*x = SignRejection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRejection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRejection) ProtoMessage() {}

func (x *SignRejection) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRejection.ProtoReflect.Descriptor instead.
func (*SignRejection) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{21}
}

func (x *SignRejection) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type SignApproved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string   `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	CurveId   string   `protobuf:"bytes,2,opt,name=curve_id,json=curveId,proto3" json:"curve_id,omitempty"`
	Signers   []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (x *SignApproved) Reset() {
	*x = SignApproved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignApproved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignApproved) ProtoMessage() {}

func (x *SignApproved) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignApproved.ProtoReflect.Descriptor instead.
func (*SignApproved) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{22}
}

func (x *SignApproved) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *SignApproved) GetCurveId() string {
	if x != nil {
		return x.CurveId
	}
	return ""
}

func (x *SignApproved) GetSigners() []string {
	if x != nil {
		return x.Signers
	}
	return nil
}

type ClientPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts int64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (x *ClientPing) Reset() {
	*x = ClientPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientPing) ProtoMessage() {}

func (x *ClientPing) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientPing.ProtoReflect.Descriptor instead.
func (*ClientPing) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{23}
}

func (x *ClientPing) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

type IssueTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol       string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Network      string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Decimals     int32  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Amount       string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Mintable     bool   `protobuf:"varint,6,opt,name=mintable,proto3" json:"mintable,omitempty"`
	OwnerAddress string `protobuf:"bytes,7,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	ProxyAdmin   string `protobuf:"bytes,8,opt,name=proxy_admin,json=proxyAdmin,proto3" json:"proxy_admin,omitempty"`
	Traceid      string `protobuf:"bytes,9,opt,name=traceid,proto3" json:"traceid,omitempty"`
	Vault        string `protobuf:"bytes,10,opt,name=vault,proto3" json:"vault,omitempty"`
}

func (x *IssueTokenRequest) Reset() {
	*x = IssueTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTokenRequest) ProtoMessage() {}

func (x *IssueTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTokenRequest.ProtoReflect.Descriptor instead.
func (*IssueTokenRequest) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{24}
}

func (x *IssueTokenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IssueTokenRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *IssueTokenRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *IssueTokenRequest) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *IssueTokenRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *IssueTokenRequest) GetMintable() bool {
	if x != nil {
		return x.Mintable
	}
	return false
}

func (x *IssueTokenRequest) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *IssueTokenRequest) GetProxyAdmin() string {
	if x != nil {
		return x.ProxyAdmin
	}
	return ""
}

func (x *IssueTokenRequest) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

func (x *IssueTokenRequest) GetVault() string {
	if x != nil {
		return x.Vault
	}
	return ""
}

type IssueTokenMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request            *IssueTokenRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"` // original request from frontend
	Message            []string           `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"` // hash of pre sign image server built
	Fee                string             `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	SignInput          string             `protobuf:"bytes,4,opt,name=sign_input,json=signInput,proto3" json:"sign_input,omitempty"`                   // rpc fields of presign image stuff i.e. gas estimation
	Timestamp          int64              `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                   // timestamp of this signmessage is generated
	ServerSignature    string             `protobuf:"bytes,6,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"` // ecdsa signature of all other fields, encoded by hex
	KeyDerivationDelta string             `protobuf:"bytes,7,opt,name=keyDerivationDelta,proto3" json:"keyDerivationDelta,omitempty"`                  // TSS-17 a big integer represents delta for HD wallet
	ChildPkX           string             `protobuf:"bytes,8,opt,name=childPkX,proto3" json:"childPkX,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived X point of public key
	ChildPkY           string             `protobuf:"bytes,9,opt,name=childPkY,proto3" json:"childPkY,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived Y point of public key
	ChildVaultId       string             `protobuf:"bytes,10,opt,name=childVaultId,proto3" json:"childVaultId,omitempty"`                             // TSS-17
}

func (x *IssueTokenMessage) Reset() {
	*x = IssueTokenMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTokenMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTokenMessage) ProtoMessage() {}

func (x *IssueTokenMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTokenMessage.ProtoReflect.Descriptor instead.
func (*IssueTokenMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{25}
}

func (x *IssueTokenMessage) GetRequest() *IssueTokenRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *IssueTokenMessage) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *IssueTokenMessage) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *IssueTokenMessage) GetSignInput() string {
	if x != nil {
		return x.SignInput
	}
	return ""
}

func (x *IssueTokenMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *IssueTokenMessage) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

func (x *IssueTokenMessage) GetKeyDerivationDelta() string {
	if x != nil {
		return x.KeyDerivationDelta
	}
	return ""
}

func (x *IssueTokenMessage) GetChildPkX() string {
	if x != nil {
		return x.ChildPkX
	}
	return ""
}

func (x *IssueTokenMessage) GetChildPkY() string {
	if x != nil {
		return x.ChildPkY
	}
	return ""
}

func (x *IssueTokenMessage) GetChildVaultId() string {
	if x != nil {
		return x.ChildVaultId
	}
	return ""
}

type MintTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	Symbol       string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Network      string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Decimals     int32  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Amount       string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Traceid      string `protobuf:"bytes,6,opt,name=traceid,proto3" json:"traceid,omitempty"`
}

func (x *MintTokenRequest) Reset() {
	*x = MintTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintTokenRequest) ProtoMessage() {}

func (x *MintTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintTokenRequest.ProtoReflect.Descriptor instead.
func (*MintTokenRequest) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{26}
}

func (x *MintTokenRequest) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *MintTokenRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MintTokenRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *MintTokenRequest) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *MintTokenRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MintTokenRequest) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

type MintTokenMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request            *MintTokenRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"` // original request from frontend
	Message            []string          `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"` // hash of pre sign image server built
	Fee                string            `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	SignInput          string            `protobuf:"bytes,4,opt,name=sign_input,json=signInput,proto3" json:"sign_input,omitempty"`                   // rpc fields of presign image stuff i.e. gas estimation
	Timestamp          int64             `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                   // timestamp of this signmessage is generated
	ServerSignature    string            `protobuf:"bytes,6,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"` // ecdsa signature of all above fields, encoded by hex
	KeyDerivationDelta string            `protobuf:"bytes,7,opt,name=keyDerivationDelta,proto3" json:"keyDerivationDelta,omitempty"`                  // TSS-17 a big integer represents delta for HD wallet
	ChildPkX           string            `protobuf:"bytes,8,opt,name=childPkX,proto3" json:"childPkX,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived X point of public key
	ChildPkY           string            `protobuf:"bytes,9,opt,name=childPkY,proto3" json:"childPkY,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived Y point of public key
	ChildVaultId       string            `protobuf:"bytes,10,opt,name=childVaultId,proto3" json:"childVaultId,omitempty"`                             // TSS-17
}

func (x *MintTokenMessage) Reset() {
	*x = MintTokenMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintTokenMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintTokenMessage) ProtoMessage() {}

func (x *MintTokenMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintTokenMessage.ProtoReflect.Descriptor instead.
func (*MintTokenMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{27}
}

func (x *MintTokenMessage) GetRequest() *MintTokenRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *MintTokenMessage) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MintTokenMessage) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *MintTokenMessage) GetSignInput() string {
	if x != nil {
		return x.SignInput
	}
	return ""
}

func (x *MintTokenMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MintTokenMessage) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

func (x *MintTokenMessage) GetKeyDerivationDelta() string {
	if x != nil {
		return x.KeyDerivationDelta
	}
	return ""
}

func (x *MintTokenMessage) GetChildPkX() string {
	if x != nil {
		return x.ChildPkX
	}
	return ""
}

func (x *MintTokenMessage) GetChildPkY() string {
	if x != nil {
		return x.ChildPkY
	}
	return ""
}

func (x *MintTokenMessage) GetChildVaultId() string {
	if x != nil {
		return x.ChildVaultId
	}
	return ""
}

type BurnTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	Symbol       string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Network      string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Decimals     int32  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Amount       string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Traceid      string `protobuf:"bytes,6,opt,name=traceid,proto3" json:"traceid,omitempty"`
}

func (x *BurnTokenRequest) Reset() {
	*x = BurnTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnTokenRequest) ProtoMessage() {}

func (x *BurnTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnTokenRequest.ProtoReflect.Descriptor instead.
func (*BurnTokenRequest) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{28}
}

func (x *BurnTokenRequest) GetOwnerAddress() string {
	if x != nil {
		return x.OwnerAddress
	}
	return ""
}

func (x *BurnTokenRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BurnTokenRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *BurnTokenRequest) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *BurnTokenRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *BurnTokenRequest) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

type BurnTokenMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request            *BurnTokenRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"` // original request from frontend
	Message            []string          `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"` // hash of pre sign image server built
	Fee                string            `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	SignInput          string            `protobuf:"bytes,4,opt,name=sign_input,json=signInput,proto3" json:"sign_input,omitempty"`                   // rpc fields of presign image stuff i.e. gas estimation
	Timestamp          int64             `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                   // timestamp of this signmessage is generated
	ServerSignature    string            `protobuf:"bytes,6,opt,name=server_signature,json=serverSignature,proto3" json:"server_signature,omitempty"` // ecdsa signature of all above fields, encoded by hex
	KeyDerivationDelta string            `protobuf:"bytes,7,opt,name=keyDerivationDelta,proto3" json:"keyDerivationDelta,omitempty"`                  // TSS-17 a big integer represents delta for HD wallet
	ChildPkX           string            `protobuf:"bytes,8,opt,name=childPkX,proto3" json:"childPkX,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived X point of public key
	ChildPkY           string            `protobuf:"bytes,9,opt,name=childPkY,proto3" json:"childPkY,omitempty"`                                      // TSS-17 a 32 bytes big integer represents derived Y point of public key
	ChildVaultId       string            `protobuf:"bytes,10,opt,name=childVaultId,proto3" json:"childVaultId,omitempty"`                             // TSS-17
}

func (x *BurnTokenMessage) Reset() {
	*x = BurnTokenMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BurnTokenMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BurnTokenMessage) ProtoMessage() {}

func (x *BurnTokenMessage) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BurnTokenMessage.ProtoReflect.Descriptor instead.
func (*BurnTokenMessage) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{29}
}

func (x *BurnTokenMessage) GetRequest() *BurnTokenRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BurnTokenMessage) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *BurnTokenMessage) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

func (x *BurnTokenMessage) GetSignInput() string {
	if x != nil {
		return x.SignInput
	}
	return ""
}

func (x *BurnTokenMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BurnTokenMessage) GetServerSignature() string {
	if x != nil {
		return x.ServerSignature
	}
	return ""
}

func (x *BurnTokenMessage) GetKeyDerivationDelta() string {
	if x != nil {
		return x.KeyDerivationDelta
	}
	return ""
}

func (x *BurnTokenMessage) GetChildPkX() string {
	if x != nil {
		return x.ChildPkX
	}
	return ""
}

func (x *BurnTokenMessage) GetChildPkY() string {
	if x != nil {
		return x.ChildPkY
	}
	return ""
}

func (x *BurnTokenMessage) GetChildVaultId() string {
	if x != nil {
		return x.ChildVaultId
	}
	return ""
}

type AddTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset    string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Network  string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	Decimals int32  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (x *AddTokenRequest) Reset() {
	*x = AddTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTokenRequest) ProtoMessage() {}

func (x *AddTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTokenRequest.ProtoReflect.Descriptor instead.
func (*AddTokenRequest) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{30}
}

func (x *AddTokenRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *AddTokenRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AddTokenRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *AddTokenRequest) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type RemoveTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset   string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RemoveTokenRequest) Reset() {
	*x = RemoveTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTokenRequest) ProtoMessage() {}

func (x *RemoveTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTokenRequest.ProtoReflect.Descriptor instead.
func (*RemoveTokenRequest) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{31}
}

func (x *RemoveTokenRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *RemoveTokenRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *RemoveTokenRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type SignFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traceid  string `protobuf:"bytes,1,opt,name=traceid,proto3" json:"traceid,omitempty"`
	Vaultid  string `protobuf:"bytes,2,opt,name=vaultid,proto3" json:"vaultid,omitempty"`
	Deviceid string `protobuf:"bytes,3,opt,name=deviceid,proto3" json:"deviceid,omitempty"`
}

func (x *SignFailed) Reset() {
	*x = SignFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignFailed) ProtoMessage() {}

func (x *SignFailed) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignFailed.ProtoReflect.Descriptor instead.
func (*SignFailed) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{32}
}

func (x *SignFailed) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

func (x *SignFailed) GetVaultid() string {
	if x != nil {
		return x.Vaultid
	}
	return ""
}

func (x *SignFailed) GetDeviceid() string {
	if x != nil {
		return x.Deviceid
	}
	return ""
}

type SignRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traceid  string `protobuf:"bytes,1,opt,name=traceid,proto3" json:"traceid,omitempty"`
	Vaultid  string `protobuf:"bytes,2,opt,name=vaultid,proto3" json:"vaultid,omitempty"`
	Deviceid string `protobuf:"bytes,3,opt,name=deviceid,proto3" json:"deviceid,omitempty"`
}

func (x *SignRejected) Reset() {
	*x = SignRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRejected) ProtoMessage() {}

func (x *SignRejected) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRejected.ProtoReflect.Descriptor instead.
func (*SignRejected) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{33}
}

func (x *SignRejected) GetTraceid() string {
	if x != nil {
		return x.Traceid
	}
	return ""
}

func (x *SignRejected) GetVaultid() string {
	if x != nil {
		return x.Vaultid
	}
	return ""
}

func (x *SignRejected) GetDeviceid() string {
	if x != nil {
		return x.Deviceid
	}
	return ""
}

type SignatureMessage_SignatureData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Ethereum-style recovery byte; only the first byte is relevant
	SignatureRecovery []byte `protobuf:"bytes,2,opt,name=signature_recovery,json=signatureRecovery,proto3" json:"signature_recovery,omitempty"`
	// Signature components R, S
	R []byte `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	// M represents the original message digest that was signed M
	M []byte `protobuf:"bytes,5,opt,name=m,proto3" json:"m,omitempty"`
}

func (x *SignatureMessage_SignatureData) Reset() {
	*x = SignatureMessage_SignatureData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ClientMessage_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureMessage_SignatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureMessage_SignatureData) ProtoMessage() {}

func (x *SignatureMessage_SignatureData) ProtoReflect() protoreflect.Message {
	mi := &file_ClientMessage_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureMessage_SignatureData.ProtoReflect.Descriptor instead.
func (*SignatureMessage_SignatureData) Descriptor() ([]byte, []int) {
	return file_ClientMessage_proto_rawDescGZIP(), []int{18, 0}
}

func (x *SignatureMessage_SignatureData) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignatureMessage_SignatureData) GetSignatureRecovery() []byte {
	if x != nil {
		return x.SignatureRecovery
	}
	return nil
}

func (x *SignatureMessage_SignatureData) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *SignatureMessage_SignatureData) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *SignatureMessage_SignatureData) GetM() []byte {
	if x != nil {
		return x.M
	}
	return nil
}

var File_ClientMessage_proto protoreflect.FileDescriptor

var file_ClientMessage_proto_rawDesc = []byte{
	0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x4a,
	0x6f, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x26, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa6,
	0x05, 0x0a, 0x11, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x4a, 0x6f,
	0x69, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x1c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x12, 0x57,
	0x0a, 0x29, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x24, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x77, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a,
	0x46, 0x0a, 0x18, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x65, 0x72, 0x73, 0x50,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x18, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x50, 0x0a, 0x18, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x96, 0x03, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6b, 0x65,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd4, 0x01, 0x0a,
	0x0c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x76, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x43, 0x75, 0x72, 0x76, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x22, 0x66, 0x0a, 0x18, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x76, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0xa8, 0x03, 0x0a, 0x08,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4d,
	0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x4e, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x08,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x45,
	0x74, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x22, 0xe3, 0x02,
	0x0a, 0x12, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x74, 0x68, 0x4c, 0x69, 0x6b, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x74, 0x68, 0x4c,
	0x69, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x50, 0x6b, 0x58, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x50, 0x6b, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0d, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x65, 0x72, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x77, 0x68, 0x69, 0x74,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x57, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x69, 0x64, 0x22, 0xaa, 0x03, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66,
	0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6e, 0x6b, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x65, 0x79,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x22,
	0xfe, 0x02, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x6f, 0x72, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6c, 0x64,
	0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x6c, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x76, 0x65, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x76, 0x65, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64,
	0x22, 0xf6, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x1a, 0x86, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a,
	0x01, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x6d, 0x22, 0x29, 0x0a, 0x08, 0x53, 0x69, 0x67,
	0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xc0, 0x02, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70,
	0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x26, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x2e, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x76, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x75, 0x72, 0x76, 0x65, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x1c, 0x0a, 0x0a, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x11, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xe1, 0x02, 0x0a, 0x11,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22,
	0xb7, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x22, 0xdf, 0x02, 0x0a, 0x10, 0x4d, 0x69,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x65, 0x79,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x59, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x10,
	0x42, 0x75, 0x72, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x69, 0x64, 0x22, 0xdf, 0x02, 0x0a, 0x10, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x75,
	0x72, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x66, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6b,
	0x65, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x50, 0x6b, 0x58, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x50, 0x6b, 0x59, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x50, 0x6b, 0x59, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x22, 0x5e,
	0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5c,
	0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x0c,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x69, 0x64, 0x42, 0x0a, 0x5a, 0x08,
	0x2e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ClientMessage_proto_rawDescOnce sync.Once
	file_ClientMessage_proto_rawDescData = file_ClientMessage_proto_rawDesc
)

func file_ClientMessage_proto_rawDescGZIP() []byte {
	file_ClientMessage_proto_rawDescOnce.Do(func() {
		file_ClientMessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_ClientMessage_proto_rawDescData)
	})
	return file_ClientMessage_proto_rawDescData
}

var file_ClientMessage_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_ClientMessage_proto_goTypes = []interface{}{
	(*PeerHelloRequest)(nil),               // 0: PeerHelloRequest
	(*PeerHello)(nil),                      // 1: PeerHello
	(*VaultJoinRequest)(nil),               // 2: VaultJoinRequest
	(*VaultJoinApproval)(nil),              // 3: VaultJoinApproval
	(*VaultPendingPeers)(nil),              // 4: VaultPendingPeers
	(*VaultRemovalNotification)(nil),       // 5: VaultRemovalNotification
	(*SignParticipantConfirmed)(nil),       // 6: SignParticipantConfirmed
	(*AddressMessage)(nil),                 // 7: AddressMessage
	(*VaultMessage)(nil),                   // 8: VaultMessage
	(*WhitelistMetaInfoMessage)(nil),       // 9: WhitelistMetaInfoMessage
	(*Transfer)(nil),                       // 10: Transfer
	(*Request)(nil),                        // 11: Request
	(*SignEthLikeRequest)(nil),             // 12: SignEthLikeRequest
	(*SignEthLikeMessage)(nil),             // 13: SignEthLikeMessage
	(*WhitelistItem)(nil),                  // 14: WhitelistItem
	(*WhitelistPerVault)(nil),              // 15: WhitelistPerVault
	(*SignMessage)(nil),                    // 16: SignMessage
	(*SignMessageForWhitelist)(nil),        // 17: SignMessageForWhitelist
	(*SignatureMessage)(nil),               // 18: SignatureMessage
	(*SignOpen)(nil),                       // 19: SignOpen
	(*SignConfirmation)(nil),               // 20: SignConfirmation
	(*SignRejection)(nil),                  // 21: SignRejection
	(*SignApproved)(nil),                   // 22: SignApproved
	(*ClientPing)(nil),                     // 23: ClientPing
	(*IssueTokenRequest)(nil),              // 24: IssueTokenRequest
	(*IssueTokenMessage)(nil),              // 25: IssueTokenMessage
	(*MintTokenRequest)(nil),               // 26: MintTokenRequest
	(*MintTokenMessage)(nil),               // 27: MintTokenMessage
	(*BurnTokenRequest)(nil),               // 28: BurnTokenRequest
	(*BurnTokenMessage)(nil),               // 29: BurnTokenMessage
	(*AddTokenRequest)(nil),                // 30: AddTokenRequest
	(*RemoveTokenRequest)(nil),             // 31: RemoveTokenRequest
	(*SignFailed)(nil),                     // 32: SignFailed
	(*SignRejected)(nil),                   // 33: SignRejected
	nil,                                    // 34: VaultPendingPeers.PendingPeersPubkeysEntry
	(*SignatureMessage_SignatureData)(nil), // 35: SignatureMessage.SignatureData
}
var file_ClientMessage_proto_depIdxs = []int32{
	3,  // 0: VaultPendingPeers.approval:type_name -> VaultJoinApproval
	34, // 1: VaultPendingPeers.pending_peers_pubkeys:type_name -> VaultPendingPeers.PendingPeersPubkeysEntry
	10, // 2: Request.transfer:type_name -> Transfer
	12, // 3: SignEthLikeMessage.request:type_name -> SignEthLikeRequest
	14, // 4: WhitelistPerVault.whitelist:type_name -> WhitelistItem
	11, // 5: SignMessage.request:type_name -> Request
	35, // 6: SignatureMessage.signatures:type_name -> SignatureMessage.SignatureData
	24, // 7: IssueTokenMessage.request:type_name -> IssueTokenRequest
	26, // 8: MintTokenMessage.request:type_name -> MintTokenRequest
	28, // 9: BurnTokenMessage.request:type_name -> BurnTokenRequest
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ClientMessage_proto_init() }
func file_ClientMessage_proto_init() {
	if File_ClientMessage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ClientMessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerHelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultJoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultJoinApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultPendingPeers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultRemovalNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignParticipantConfirmed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistMetaInfoMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignEthLikeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignEthLikeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhitelistPerVault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMessageForWhitelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRejection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignApproved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTokenMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintTokenMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BurnTokenMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ClientMessage_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureMessage_SignatureData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ClientMessage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ClientMessage_proto_goTypes,
		DependencyIndexes: file_ClientMessage_proto_depIdxs,
		MessageInfos:      file_ClientMessage_proto_msgTypes,
	}.Build()
	File_ClientMessage_proto = out.File
	file_ClientMessage_proto_rawDesc = nil
	file_ClientMessage_proto_goTypes = nil
	file_ClientMessage_proto_depIdxs = nil
}
