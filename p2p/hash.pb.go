// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hash.proto

package p2p

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type P2PMessageWithHash struct {
	From                    string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                      []string `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
	Hash                    []byte   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	OriginMsg               []byte   `protobuf:"bytes,4,opt,name=originMsg,proto3" json:"originMsg,omitempty"`
	IsToOldAndNewCommittees bool     `protobuf:"varint,5,opt,name=is_to_old_and_new_committees,json=isToOldAndNewCommittees,proto3" json:"is_to_old_and_new_committees,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *P2PMessageWithHash) Reset()         { *m = P2PMessageWithHash{} }
func (m *P2PMessageWithHash) String() string { return proto.CompactTextString(m) }
func (*P2PMessageWithHash) ProtoMessage()    {}
func (*P2PMessageWithHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_844ef095867f6a46, []int{0}
}

func (m *P2PMessageWithHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_P2PMessageWithHash.Unmarshal(m, b)
}
func (m *P2PMessageWithHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_P2PMessageWithHash.Marshal(b, m, deterministic)
}
func (m *P2PMessageWithHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_P2PMessageWithHash.Merge(m, src)
}
func (m *P2PMessageWithHash) XXX_Size() int {
	return xxx_messageInfo_P2PMessageWithHash.Size(m)
}
func (m *P2PMessageWithHash) XXX_DiscardUnknown() {
	xxx_messageInfo_P2PMessageWithHash.DiscardUnknown(m)
}

var xxx_messageInfo_P2PMessageWithHash proto.InternalMessageInfo

func (m *P2PMessageWithHash) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *P2PMessageWithHash) GetTo() []string {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *P2PMessageWithHash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *P2PMessageWithHash) GetOriginMsg() []byte {
	if m != nil {
		return m.OriginMsg
	}
	return nil
}

func (m *P2PMessageWithHash) GetIsToOldAndNewCommittees() bool {
	if m != nil {
		return m.IsToOldAndNewCommittees
	}
	return false
}

func init() {
	proto.RegisterType((*P2PMessageWithHash)(nil), "p2p.P2pMessageWithHash")
}

func init() { proto.RegisterFile("hash.proto", fileDescriptor_844ef095867f6a46) }

var fileDescriptor_844ef095867f6a46 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x48, 0x2c, 0xce,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x30, 0x2a, 0x50, 0x5a, 0xc9, 0xc8, 0x25,
	0x14, 0x60, 0x54, 0xe0, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x1a, 0x9e, 0x59, 0x92, 0xe1, 0x91,
	0x58, 0x9c, 0x21, 0x24, 0xc4, 0xc5, 0x92, 0x56, 0x94, 0x9f, 0x2b, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x19, 0x04, 0x66, 0x0b, 0xf1, 0x71, 0x31, 0x95, 0xe4, 0x4b, 0x30, 0x29, 0x30, 0x6b, 0x70, 0x06,
	0x31, 0x95, 0xe4, 0x83, 0xd4, 0x80, 0x4c, 0x93, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3,
	0x85, 0x64, 0xb8, 0x38, 0xf3, 0x8b, 0x32, 0xd3, 0x33, 0xf3, 0x7c, 0x8b, 0xd3, 0x25, 0x58, 0xc0,
	0x12, 0x08, 0x01, 0x21, 0x5b, 0x2e, 0x99, 0xcc, 0xe2, 0xf8, 0x92, 0xfc, 0xf8, 0xfc, 0x9c, 0x94,
	0xf8, 0xc4, 0xbc, 0x94, 0xf8, 0xbc, 0xd4, 0xf2, 0xf8, 0xe4, 0xfc, 0xdc, 0xdc, 0xcc, 0x92, 0x92,
	0xd4, 0xd4, 0x62, 0x09, 0x56, 0x05, 0x46, 0x0d, 0x8e, 0x20, 0xf1, 0xcc, 0xe2, 0x90, 0x7c, 0xff,
	0x9c, 0x14, 0xc7, 0xbc, 0x14, 0xbf, 0xd4, 0x72, 0x67, 0xb8, 0x74, 0x12, 0x1b, 0xd8, 0xdd, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xf1, 0xb0, 0xca, 0xc5, 0x00, 0x00, 0x00,
}
